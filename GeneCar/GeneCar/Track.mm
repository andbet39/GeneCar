//
//  Track.m
//  GeneCar
//
//  Created by Andrea Terzani on 29/06/11.
//  Copyright 2011 __MyCompanyName__. All rights reserved.
//

#import "Track.h"
#import "cocos2d.h"

#define PTM_RATIO 32
#define LENGHT 50

@implementation Track

- (id)init
{
    self = [super init];
    if (self) {
        // Initialization code here.
    }
    
    return self;
}

- (void) generaRandom : (b2World *)world
{
    
    // Define the ground body.
    b2BodyDef groundBodyDef;
    groundBodyDef.position.Set(0, 0); // bottom-left corner
    
    // Call the body factory which allocates memory for the ground body
    // from a pool and creates the ground box shape (also from a pool).
    // The body is also added to the world.
     groundBody = world->CreateBody(&groundBodyDef);
    
    // Define the ground box shape.
    b2PolygonShape groundBox;		
    groundBox.SetAsEdge(b2Vec2(0,1), b2Vec2(15,1));
    
    b2FixtureDef groundFixtureDef;
    
    groundFixtureDef.friction=0.5f;
    groundFixtureDef.restitution=0.0f;
    groundFixtureDef.shape=&groundBox;
    
    groundBody->CreateFixture(&groundFixtureDef);
    NSString* trk=@"track_data[]={";

    float nextH;
    float H=1;
    float x=15;
    for(int i=0;i<LENGHT;i++){
        nextH=(float)(arc4random()/(RAND_MAX*2.0F)*1.0F)+10/PTM_RATIO;
        
        trk=[trk stringByAppendingString:[NSString stringWithFormat:@"%f,",nextH]];
        
        groundBox.SetAsEdge(b2Vec2(x,H), b2Vec2(x+10,nextH));
        groundFixtureDef.shape=&groundBox;
        
        groundBody->CreateFixture(&groundFixtureDef);
        H=nextH;
        x+=10;

    
    }
    NSLog(trk);

}


-(void)generaSaved : (b2World *)world
{
 float track_data[61]={2.678646,1.263653,0.681356,1.903954,1.776394,3.907021,0.470990,1.360077,2.919796,2.942992,1.637262,1.210257,2.742758,2.292620,3.802434,2.404684,1.245418,1.684128,1.513848,3.659125,3.711491,1.014721,3.257064,1.165604,3.323402,1.163363,1.339856,2.265011,0.114007,1.675083,2.419302,0.145610,0.387978,3.097635,1.328881,1.477847,3.489499,3.298249,0.269095,2.588415,1.740906,1.587320,3.770866,0.277965,1.862542,1.605137,1.953124,2.557082,2.957582,3.339946,3.846536,0.462308,0.920894,1.641378,2.478498,2.754299,3.937238,0.046623,0.037060,1.553602,1.089946,/*/0.774970,1.187878,2.906233,2.642908,3.911081,1.465535,1.268408,3.767665,0.896543,1.815310,0.175340,0.990381,2.023322,0.836482,2.069583,1.279329,0.978214,3.696368,2.642966,3.489884,0.596952,1.699921,1.474993,2.918651,2.284098,0.555659,3.114656,0.326225,2.646919,0.960278,3.331527,1.130797,2.800427,3.139802,0.677355,0.746220,3.848116,1.197350,1.168469,1.864962,0.602374,0.461661,1.465358,1.345917,2.939585,2.652680,3.615929,3.277174,3.580489,1.265220,2.275253,3.068172,1.965050,2.717827,0.083979,1.548165,2.355483,0.343829,0.853030,0.982071,1.578441,1.487405,3.697047,1.222059,1.221352,3.016377,0.889629,1.930537,1.094308,3.661826,2.603595,1.113788,3.105043,1.227442,0.521457,1.342237,0.735070,2.708795,0.155263,3.190541,3.088913,2.823880,1.151018,1.083571,1.612251,0.216817,1.105911,0.258237,3.270794,1.742115,3.283626,2.557318,3.622389,0.509750,2.471010,2.980217,2.357962,0.166724,0.412778,2.175545,2.241383,2.486264,3.793703,0.674664,1.287275,1.765115,0.453961,1.235004,0.536844,0.003280,1.717885,0.995180,1.540892,2.541482,0.278890,0.279515,2.049846,0.514303,3.953415,2.074685,2.989400,1.462338,1.457820,3.657999,1.843061,1.854111,1.915550,2.414820,3.516916,2.579541,3.998184,0.795645,3.602377,3.679976,1.160360,1.974298,2.551483,0.140228,2.455396,2.739547,1.638859,3.270271,2.340879,3.353131,1.032370,0.946900,1.146335,2.897035,3.133647,2.830073,3.803920,3.254840,2.561269,3.897392,1.527313,3.212460,1.826522,3.967911,3.082835,2.943205,2.538838,3.578633,1.995145,1.158660,3.607717,1.058334,3.704186,3.371456,3.790098,2.021315,1.248390,1.194749,3.267384,0.241530,1.803251,1.504538,1.272760,3.551163,3.167172,3.308059,2.145278,2.378586,0.105641,2.206606,3.392768,3.422403,1.291638,0.414470,2.467763,0.459162,0.581654,3.304112,1.946752,3.240197,2.192129,0.687042,2.045863,2.690971,3.764052,0.388238,3.649824,2.456269,2.299165,2.841560,3.438688,2.214088,2.914058,0.105422,2.943944,1.021585,3.003897,0.548042,0.563200,0.344548,0.983288,3.572320,1.828213,3.070170,3.837873,3.953629,3.200509,0.384584,1.461606,0.080945,3.493258,0.995442,1.733716,0.790167,1.199220,3.743730,3.444851,3.129469,0.473695,3.412343,2.460161,3.029230,0.287238,3.259080,1.294657,3.341137,0.077763,2.553267,2.273313,1.929280,0.740040,3.467301,1.582334,3.535140,2.409014,2.139936,3.939343,1.951141,3.173380,2.028576,0.654965,1.623334,0.878090,2.674919,1.788068,2.080963,2.706830,1.927562,1.551781,3.970299,0.912193,2.524306,3.161232,1.527305,3.989274,0.105494,1.542299,2.333483,0.299390,0.691173,3.821885,1.385161,3.415003,0.106065,1.730463,3.576740,3.745826,1.863495,1.191075,1.095982,0.380480,2.238059,0.372278,3.497712,2.192853,3.599066,1.674693,2.535792,2.815259,2.788218,2.935060,3.311278,1.705015,1.634125,3.077012,3.549693,3.946601,2.267856,2.460415,3.704134,1.254490,3.823743,1.927269,0.211362,2.771550,1.473017,3.038636,1.701922,3.170181,1.565088,1.834795,1.361314,2.114176,0.214347,2.490600,3.200512,3.992623,3.138560,1.269823,2.362292,3.244418,2.756375,1.331778,2.462189,3.714458,2.651468,0.713513,3.626779,1.377732,3.338333,1.247613,2.034758,3.076020,3.898764,2.603799,3.598289,2.603227,1.771662,3.523522,2.253126,3.796378,2.889927,2.754605,0.904848,3.852209,0.539047,2.280746,3.684755,3.931166,1.140206,0.916306,0.930899,3.086600,3.991788,2.242470,0.850699,1.689987,3.464993,0.431604,3.359728,2.362590,2.856446,2.998784,1.550558,3.971119,2.927901,3.702780,0.850142,3.492926,3.472307,2.093112,3.209242,1.038951,2.520730,0.598968,1.842060,0.825392,0.823434,3.164683,0.585845,2.834121,2.664286,1.485254,3.538742,0.582568,1.622437,2.675277,0.713051,1.082304,0.690807,1.904896,1.978329,1.717342,3.246491,2.086434,0.643253,3.746011,2.314952,2.396180,3.583878,3.531376,0.388925,2.061245,3.474782,0.315262,0.162409,2.638541,2.693807,3.584711,1.169279,0.841304,3.158341,0.089520,3.656811,3.143500,2.359547,1.536815,3.986578,0.848259,0.672509,1.519583,1.365035,2.536180,2.853122,0.301999,2.471325,1.451958,2.516390,3.383350,1.797869,3.289022,3.079133,1.245852,2.881152,3.822970
*/
 };
    
    // Define the ground body.
    b2BodyDef groundBodyDef;
    groundBodyDef.position.Set(0, 0); // bottom-left corner
    
    // Call the body factory which allocates memory for the ground body
    // from a pool and creates the ground box shape (also from a pool).
    // The body is also added to the world.
    groundBody = world->CreateBody(&groundBodyDef);
    
    // Define the ground box shape.
    b2PolygonShape groundBox;		
    groundBox.SetAsEdge(b2Vec2(0,1), b2Vec2(15,1));
    
    b2FixtureDef groundFixtureDef;
    
    groundFixtureDef.friction=0.5f;
    groundFixtureDef.restitution=0.0f;
    groundFixtureDef.shape=&groundBox;
    
    groundBody->CreateFixture(&groundFixtureDef);
    NSString* trk=@"track_data[]={";
    
    float nextH;
    float H=1;
    float x=15;
    for(int i=0;i<61;i++){
        nextH=track_data[i];
        
        trk=[trk stringByAppendingString:[NSString stringWithFormat:@"%f,",nextH]];
        
        groundBox.SetAsEdge(b2Vec2(x,H), b2Vec2(x+8,nextH));
        groundFixtureDef.shape=&groundBox;
        
        groundBody->CreateFixture(&groundFixtureDef);
        H=nextH;
        x+=8;
        
        
    }
    NSLog(trk);
    
}
- (void) draw
{

    const b2Transform& xfb=groundBody->GetTransform();
    
    for (b2Fixture* f = groundBody->GetFixtureList(); f; f = f->GetNext())
    {
        
        b2PolygonShape* poly = (b2PolygonShape*)f->GetShape();
        int32 vertexCount = poly->m_vertexCount;
        
        b2Vec2 vertices[2];
        CGPoint v[2];
        
        for (int32 i = 0; i < vertexCount; ++i)
        {
            vertices[i] = b2Mul(xfb, poly->m_vertices[i]);
            v[i].x=vertices[i].x*PTM_RATIO;
            v[i].y=vertices[i].y*PTM_RATIO;
        }
        glColor4f(0.0,0.8,0.5, 0.1);
        
        
        glLineWidth(2.0f);
        ccDrawPoly(v,vertexCount,NO);
        
    }


}

@end
